package ArithmeticCoder;/*
 * Reference arithmetic coding
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import java.io.*;
import java.util.HashSet;
import java.util.Set;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress {
	
	public static void main(String[] args) throws IOException {
		// Handle command line arguments
//		if (args.length != 2) {
//			System.err.println("Usage: java AdaptiveArithmeticDecompress InputFile OutputFile");
//			System.exit(1);
//			return;
//		}

		File inputFile  = new File("/home/tread/files/aetest/src/compressed.bin");
		File outputFile = new File("/home/tread/files/aetest/src/compressTwo.txt");
		
		// Perform file decompression
		try (BitInputStream in = new BitInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
				OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile))) {
			decompress(in, out);
		}
	}
	
	//todo still have to encode the table size
    //todo WILL DIFFERENT MACHINES DECODE THESE IN THE SAME WAY ENCODE IN THE SAME WAY?
	// To allow unit testing, this method is package-private instead of private.
	static void decompress(BitInputStream in, OutputStream out) throws IOException {
	    int count = 0;
	    while (in.read() != 0) {
	        count++;
        }

        String binaryRule = "";
        for (int i = 0; i < count; i++) {
            //todo theres probably a better way, length known multiply just add up the numbers
            binaryRule += String.valueOf(in.read());
        }

        int ruleSize = Integer.parseInt(binaryRule, 2);

        FlatFrequencyTable initFreqs = new FlatFrequencyTable(ruleSize);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
        Boolean isEdit = false; //todo don't forget
        //! = 33
        int lastSymbol = -1;
        String output = "";
		while (true) {
			// Decode and write one byte
            int symbol = dec.read(freqs);

            if (symbol == ruleSize - 1) {  // EOF symbol
                break;
            }

//  TODO TRYING TO GET THE FREQUENCY WORKING
			// checking digit here is no good as could be encoded to anything
            //also could be positioned anywhere including over symbols
            if (symbol > 32 && symbol < 128) {
                if (Character.isDigit((char)symbol)) {
                    // todo it is very possible that a marker length could be more than one digit long
                    // yeah issue when 12
                    if (lastSymbol != '*') {
                        output += "!";
                        out.write(33);
                    }
                }
                output += String.valueOf((char) symbol);
                out.write(symbol);
            }
            else {
                if (lastSymbol != '*') {
                    out.write(33); // remember have to deal with edits too....
                    output += "!";
                }
                String s = String.valueOf(symbol - 128); //todo issue with frequency the offset?
                output += s;
                for (int i = 0; i < s.length(); i++) {
                    out.write((int)s.charAt(i));
                }
            }

            lastSymbol = symbol;
            freqs.increment(symbol);
            freqs.set(symbol, freqs.get(symbol) + 10);
		}

        System.out.println();
        System.out.println(output);
        //
        //todo probably wont ever use just return string to decompress, unless wanted compressed at this level?
        // appears to wipe out when set specifically to text....
        try (PrintWriter outFile = new PrintWriter("/home/tread/IdeaProjects/projectGC/textFiles/compressTest.txt")) {
            outFile.println(output);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
	}
	
}
