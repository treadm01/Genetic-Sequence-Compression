package ArithmeticCoder;/*
 * Reference arithmetic coding
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import GrammarCoder.Decompress;

import java.io.*;
import java.util.HashSet;
import java.util.Set;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress {
    static String PATH = System.getProperty("user.dir") + "/compressedFiles";
	
	public static void main(String[] args) throws IOException {

		File inputFile  = new File(PATH + "/compressed.bin");
		File outputFile = new File(PATH + "/compressTwo.txt");
		
		// Perform file decompression
		try (BitInputStream in = new BitInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
				OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile))) {
			decompress(in, out);
		}
	}
	
	//TODO HAVE TO BE ABLE TO DECODE NEW IMPLICIT ENCODINGS - now have different symbols for markers etc
    //todo WILL DIFFERENT MACHINES DECODE THESE IN THE SAME WAY ENCODE IN THE SAME WAY?
	// To allow unit testing, this method is package-private instead of private.
	static void decompress(BitInputStream in, OutputStream out) throws IOException {
        Set<Character> symbolMarker = new HashSet<>();
        symbolMarker.add('{');
        symbolMarker.add('?');
        symbolMarker.add('#');
	    int ruleSize = readGammaCode(in);
        FlatFrequencyTable initFreqs = new FlatFrequencyTable(ruleSize);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
        int lastSymbol = -1;
        String output = "";
        int changeFreq = 0;
		while (true) {
            // Decode and write one byte
            int symbol = dec.read(freqs);
            changeFreq = 10;

            if (symbol == ruleSize - 1) {  // EOF symbol
                break;
            }

//            out.write(symbol);

            if (!symbolMarker.contains((char)lastSymbol) && symbol >= 128) {
                if (symbol % 2 == 0) {
                    output += "!";
                    output += (char) (symbol - 128);
                    changeFreq = 8;
                }
                else {
                    output += "\'";
                    output += (char) (symbol - 129);
                    changeFreq = 2;
                }
            }
            else {
                output += (char) symbol;
            }

            freqs.set(symbol, freqs.get(symbol) + 10);

            if (symbolMarker.contains((char)lastSymbol)) {
                lastSymbol = -1;
            }
            else {
                lastSymbol = symbol;
            }
            freqs.increment(symbol);
        }

        //System.out.println(output);
        Decompress d = new Decompress();
		d.buildGrammar(output);
    }

	static int readGammaCode(BitInputStream in) throws IOException {
        int count = 0;
        while (in.read() != 0) {
            count++;
        }

        String binaryRule = "";
        for (int i = 0; i < count; i++) {
            //todo theres probably a better way, length known multiply just add up the numbers
            binaryRule += String.valueOf(in.read());
        }

        int ruleSize = Integer.parseInt(binaryRule, 2);

        return ruleSize;
    }
}
