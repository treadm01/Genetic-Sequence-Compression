package ArithmeticCoder;/*
 * Reference arithmetic coding
 * Copyright Â© 2018 Project Nayuki. (MIT License)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

The Software is provided "as is", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the Software or the use or other dealings in the Software.
 *
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import GrammarCoder.Rule;

import java.io.*;
import java.util.HashSet;
import java.util.Set;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress {
    static String PATH = System.getProperty("user.dir") + "/compressedFiles";
    static Rule rule;
    String implicitEncoding;
	
	public AdaptiveArithmeticDecompress(File filePath) throws IOException {

		File inputFile  = filePath;
		File outputFile = new File(PATH + "/compressTwo.txt");
		
		// Perform file decompression
		try (BitInputStream in = new BitInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
				OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile))) {
			decompress(in, out);
		}
	}
	
	//TODO HAVE TO BE ABLE TO DECODE NEW IMPLICIT ENCODINGS - now have different symbols for markers etc
    //todo WILL DIFFERENT MACHINES DECODE THESE IN THE SAME WAY ENCODE IN THE SAME WAY?
	// To allow unit testing, this method is package-private instead of private.
	public void decompress(BitInputStream in, OutputStream out) throws IOException {
        Set<Character> symbolMarker = new HashSet<>();
        symbolMarker.add('{');
        symbolMarker.add('?');
        symbolMarker.add('#');
        symbolMarker.add('*');
	    int ruleSize = readGammaCode(in);
        FlatFrequencyTable initFreqs = new FlatFrequencyTable(ruleSize);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
        int lastSymbol = -1;
        String output = "";
        int changeFreq = 0;
		while (true) {
            // Decode and write one byte
            int symbol = dec.read(freqs);
            changeFreq = 10;

            if (symbol == ruleSize - 1) {  // EOF symbol
                break;
            }

//            out.write(symbol);

            // todo is this working for large pointers??? yeah should be

            // if the last symbols wasn't something that indicates the next is not a nonterminal
            if (!symbolMarker.contains((char)lastSymbol) && symbol >= 128) {
                if (symbol % 2 == 0) {
                    output += "!";
                    output += (char) (symbol - 128);
                    changeFreq = 8;
                }
                else {
                    output += "\'";
                    output += (char) (symbol - 129);
                    changeFreq = 2;
                }
            }
            else {
                output += (char) symbol;
            }

            freqs.set(symbol, freqs.get(symbol) + 10);

            if (symbolMarker.contains((char)lastSymbol)) {
                lastSymbol = -1;
            }
            else {
                lastSymbol = symbol;
            }
            freqs.increment(symbol);
        }

        //System.out.println(output);
        //todo needs to split up and dealt with properly
//        Decompress d = new Decompress();
//        rule = d.buildGrammar(output);
//        String s = rule.getSymbolString(rule, false);
//        for (int i = 0; i < s.length(); i++) {
//            out.write(s.charAt(i));
//        }
        implicitEncoding = output;
    }

    public String getImplicitEncoding() {
	    return implicitEncoding;
    }


	public int readGammaCode(BitInputStream in) throws IOException {
        int count = 0;
        while (in.read() != 0) {
            count++;
        }

        String binaryRule = "";
        for (int i = 0; i < count; i++) {
            //todo theres probably a better way, length known multiply just add up the numbers
            binaryRule += String.valueOf(in.read());
        }

        int ruleSize = Integer.parseInt(binaryRule, 2);

        return ruleSize;
    }
}
