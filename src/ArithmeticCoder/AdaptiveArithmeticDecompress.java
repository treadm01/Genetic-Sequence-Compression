package ArithmeticCoder;/*
 * Reference arithmetic coding
 * Copyright Â© 2018 Project Nayuki. (MIT License)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

The Software is provided "as is", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the Software or the use or other dealings in the Software.
 *
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import GrammarCoder.Rule;

import java.io.*;
import java.util.HashSet;
import java.util.Set;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress {
    private String implicitEncoding;
    private static Set<Character> SYMBOL_SET = Set.of('{', '?', '#', '*');

    public AdaptiveArithmeticDecompress(File filePath) throws IOException {
        // Perform file decompression
		try (BitInputStream in = new BitInputStream(new BufferedInputStream(new FileInputStream(filePath)))) {
			implicitEncoding = decompress(in);
		}
	}

	// To allow unit testing, this method is package-private instead of private.
	public String decompress(BitInputStream in) throws IOException {
	    int ruleSize = readGammaCode(in);
        FlatFrequencyTable initFreqs = new FlatFrequencyTable(ruleSize);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
        int lastSymbol = -1;
        StringBuilder output = new StringBuilder();
		while (true) {
            // Decode and write one byte
            int symbol = dec.read(freqs);

            if (symbol == ruleSize - 1) {  // EOF symbol
                break;
            }

            output.append(getCorrectSymbol((char) lastSymbol, (char) symbol));

            freqs.set(symbol, freqs.get(symbol) + 10);
            if (SYMBOL_SET.contains((char)lastSymbol)) {
                lastSymbol = -1;
            }
            else {
                lastSymbol = symbol;
            }
            freqs.increment(symbol);
        }
        return output.toString();
    }

    public String getImplicitEncoding() {
	    return implicitEncoding;
    }

	private int readGammaCode(BitInputStream in) throws IOException {
        int count = 0;
        while (in.read() != 0) {
            count++;
        }

        StringBuilder binaryRule = new StringBuilder();
        for (int i = 0; i < count; i++) {
            binaryRule.append(String.valueOf(in.read()));
        }
        return Integer.parseInt(binaryRule.toString(), 2);
    }

    private String getCorrectSymbol(char lastSymbol, char symbol) {
        StringBuilder output = new StringBuilder();
        if (!SYMBOL_SET.contains(lastSymbol) && symbol >= 128) {
            if (symbol % 2 == 0) {
                output.append("!").append((char)(symbol - 128));
            }
            else {
                output.append("\'").append((char) (symbol - 129));
            }
        }
        else {
            output.append(symbol);
        }
        return output.toString();
    }
}
