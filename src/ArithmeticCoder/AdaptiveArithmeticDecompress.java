package ArithmeticCoder;/*
 * Reference arithmetic coding
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress {
	
	public static void main(String[] args) throws IOException {
		// Handle command line arguments
//		if (args.length != 2) {
//			System.err.println("Usage: java AdaptiveArithmeticDecompress InputFile OutputFile");
//			System.exit(1);
//			return;
//		}

		File inputFile  = new File("/home/tread/files/aetest/src/compressed.bin");
		File outputFile = new File("/home/tread/files/aetest/src/compressTwo");
		
		// Perform file decompression
		try (BitInputStream in = new BitInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
				OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile))) {
			decompress(in, out);
		}
	}
	
	
	// To allow unit testing, this method is package-private instead of private.
	static void decompress(BitInputStream in, OutputStream out) throws IOException {
		FlatFrequencyTable initFreqs = new FlatFrequencyTable(2450);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
        Boolean isEdit = false;
		while (true) {
			// Decode and write one byte
			int symbol = dec.read(freqs);

			// checking digit here is no good as could be encoded to anything
            //also could be positioned anywhere including over symbols
            if (symbol > 32 && symbol < 128) {
                System.out.println((char) symbol + " " + freqs.get(symbol));
                //freqs.set(symbol, 5);
                out.write(symbol);
            }
            else {
                out.write('!');
            }


                //
           //     System.out.println(Character.getNumericValue(symbol));
                //String s = String.valueOf(symbol);
//                for (int i = 0; i < s.length(); i++) {
//                    out.write(s.charAt(i));
//                }


            if (symbol == 2450-1) {  // EOF symbol
                out.write(symbol);
                break;
            }

            freqs.increment(symbol);
		}
	}
	
}
